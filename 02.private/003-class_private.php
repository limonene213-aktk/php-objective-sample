<?php

/*
プロパティを変更させずに、でもプロパティを表示して
利用するというような手段は残素場合には、privateを使う
価値はあります。これは機密情報というよりは、必要なプロパティ
で、なおかつ後から上書き改ざんなどを防ぎたいものがある場合には
以下のようにPrivateのスコープを使うことはできます。
クラスやオブジェクトの内部状態を隠す必要がある場合などに使えます。
たとえば、大規模な開発におけるユーザー認証システム（自作）や、
ショッピングカートシステム（自作）の実装などでは使えるでしょう。
そのような場合、外部からの状態改竄を防ぎつつ、ハッシュ計算やトークンを
駆使する必要がありますから、privateでデータ保護をすることには意味があります。
ただし、Laravelなどを使えば、上記のように積極的にprivateを使う意味はあまり
ありません（出来合いの認証システムなどを流用でき、自力で実装する必要がないので）。
フレームワーク等の普及に伴って、PHPのコードの書き方や必要性も変化してきています。
したがって、今後どの程度まで実用性があるかはちょっと微妙なところです。
*/

class Hoge {
    public $color;           // 誰でもアクセス可能
    private $protected = "保護済み"; // クラスの外からアクセスできない

    public function showProtect() {
        echo $this->protected;  // クラス内ならアクセスできる
    }
}

$hoge_obj = new Hoge();
$hoge_obj->color = "blue";     // OK: publicプロパティなのでアクセス可能
echo $hoge_obj->color;         // OK: publicプロパティなので表示可能

// これをするとエラーになる：
// echo $hoge_obj->protected;     // エラー: privateプロパティには直接アクセスできない

$hoge_obj->showProtect();       // OK: クラス内部でprivateを扱うので呼び出し可能
?>
