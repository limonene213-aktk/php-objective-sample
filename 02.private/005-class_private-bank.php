<?php

/*
銀行システムを模したコードで、外部からの残高等の変更を阻止するような
形でprivateを使う例を示します。privateを使うことで、直接的に残高に
触れることを禁止しつつ、処理上は残高を使うことができるようにしています。
この場合、Class内部からしかアクセスできないため、残高に対する操作は
Class内で定義された形でしか行うことができません。
しかし、銀行のような高信頼を要求されるシステムをPHPで作ることは現実的には
ほとんどあり得ないため、以下のような実装をPHPで行うことは極めて稀かとは
思います（以下のサンプルコードの処理自体はCOBOLやJAVAなどでもよく使われる
トランザクション処理をイメージしましたが、以下の例ではオブジェクト指向による
カプセル化を行って安全性を保障している点が典型的なCOBOL実装例とは違います。
一方、JAVAがCOBOLの置き換えとなっている一因として、オブジェクト指向を使って
情報を適切にカプセル化することができるという特徴があるから、という部分も
なんとなく感じ取れるのではないかなと思います）。
*/

class BankAccount {
    private $balance = 0; //ここをprivateにする

    // 入金処理
    public function deposit($amount) {
        if ($amount > 0) {
            $this->balance += $amount; //$thisはこのメソッドが呼び出されたオブジェクト自身という意味
        }
    }

    // 出金処理
    public function withdraw($amount) {
        if ($amount > 0 && $amount <= $this->balance) {
            $this->balance -= $amount;
        } else {
            echo "残高不足にゃ！\n";
        }
    }

    // 残高を確認するメソッド
    public function getBalance() {
        return $this->balance;
    }
}

/*
さて、classのなかで、

$this->balance 

となっていますが、これはつまりオブジェクト自身のbalanceプロパティにアクセスしているということです。
balanceは初期化されて0になっているため、ここを基準に金額の増減を考えることができる。
*/

// 実際の利用
$account = new BankAccount();
$account->deposit(1000); // 1000円入金
$account->withdraw(500); // 500円出金
echo "入出金結果: " . $account->getBalance() . "円\n";

/*
残高が500円となれば成功！
実際の利用例では、入出金処理を行う（ゼロベースへの金額の増減）が、ここでは
一貫して金額を引数として渡すという処理をしており、金額関連の変数などに直接
外部からアクセスをしているわけではないことがわかる。
このように、外部から直接balanceを変更できないため、データの一貫性が守られる
PHPを用いた銀行での実装例はほぼ皆無といえるが、家計簿ソフトぐらいであれば上記を
サンプルコードにして作成することもできるため、ぜひお試しあれ！
*/

/*
なぜ銀行や高度な個人情報管理を行うようなシステムにPHPが採用されないのか？

これにはいくつか理由があります。
ややレベルの高い話ですが、みなさんが今まで勉強してきたほかの言語などとの比較により
理解が深まるということもあると思いますし、根本的な話をかなり含むため、ぜひ読み進めて
もらいたいなと思います。

最初に箇条書きでまとめます：

1. セキュリティと信頼性
   - JavaとCOBOLは、メモリ管理や型チェック機能が強力です。たとえばJavaにはガベージコレクション（GC）があり、必要なメモリ管理を安全に行うことができます。
   - PHPは動的型付け言語であり、型エラーが発生しても気づきにくい面があり、銀行システムには適していません。

2. メンテナンス性
   - COBOLは1959年から使用されている歴史のある言語で、特に銀行業界での実績が長いため、メンテナンスに強いとされています。Javaも大手企業のサポートがあるので、長期運用の信頼性があります。

3. コードの保護
   - JavaやCOBOLはコンパイルを必要とするため、ソースコードが直接公開されず改竄のリスクが低いという特徴があります。PHPはスクリプト言語であるため、コードがそのまま実行されることから、この面での保護が少ないです。

4. パフォーマンスとスケーラビリティ
   - 銀行システムでは、毎秒何百万件もの取引データを処理する必要があり、コンパイル型の言語であるJavaやCOBOLが適しています。PHPは都度機械語に翻訳してから実行するため、処理速度が劣る傾向にあります。

PHPは気軽だがハンドリングできる余地が小さく、
JAVAやCOBOLは気軽ではないが、詳細に至るまで人間がハンドリングできる。
そういう感じです。


以下、上記の解説です：

まず、セキュリティや信頼性、実績という面でPHPがJAVAやCOBOLに劣るからです。

たとえばJAVAは堅牢な型チェック機能があり、メモリ管理もしっかりしています
（これはCOBOLでも同様です）。JAVAにはGCがありますが、これも結果的には
人間がちょうどいいぐらいのレベル（必要十分なレベル）でハンドリングできますから、
しっかりとプログラムを組めば、メモリ関連エラーは出にくいと言えます。
そのため、人為的に多くの部分を制御でき、そのためにシステムエラーが起きる
可能性を低くできます。

一方、PHPは動的型付け言語であり、しかもメモリ関連の処理はすべて言語側で自動的に
行ってくれます。これは手軽である一方、型関連エラーが出る（出ても気づかない）可能性
を否定できないことや、メモリ管理を人間が掌握することが難しく、思わぬエラーが出ないとは
言い切れません。

また、メンテナンス性に関してもかなりの違いがあります。
プログラミング言語ではなくLinuxの話ですが、近年、世界的な大手であるRedHat社が
CentOSの開発とサポートを一方的に打ち切ったことで、世界的なニュースになりました。
極めて信頼性が高いと思われていた企業や開発主体ですら、こういうことが（稀ですが）あります。
プログラミング言語は、特定の企業などが作っているわけではなく、多くが開発コミュニティという
レベルでメンテナンスが行われます。これはあくまでも「コミュニティ」であり、後ろ盾があるわけ
でもありません。そんななか、JAVAは米国Oracleという大手ソフトウェア会社の後ろ盾がありますので、
その点は多少安心できる点でもあります。

PHPは1994年にできた言語であり、JAVAは1990年にできた言語です。COBOLに至っては、1959年にできた
言語です。つまり、COBOLは60年以上使われており、しかも長期メンテナンスがしやすいように言語設計
されています。もちろん、古すぎる言語であることは否めないため、最近ではJAVAへの置き換えがなされ
つつありますが、それでもJAVAもCOBOLに比べれば「新しい言語」です。なので、置き換えにあたっては
慎重に行われているというのが現状です。

PHPはスクリプト言語であり、コードをそのまま実行できる一方で、JAVAやCOBOLはコンパイルを必要とする
システム言語です。したがって、コンパイル後にソースコードレベルでの改竄を受けにくいという
非常に大きなメリットもあります。そもそもスクリプト言語の場合、サーバー等にソースコードを直接置いて
おく必要も出てきますので、コードが公開されてしまう（＝システムの仕組みが丸見えに！）というリスクもあります。

さらに、PHPなどのスクリプト言語は、気軽に実行でき、またWebブラウザで直接動くなどの性質もあるため、
中小規模のWebアプリには最適です。一方で、スクリプト言語はコンパイルが不要な一方、実行時には
「ソースコードを機械語に直してから実行」という過程を毎回踏まなければいけないため、どうしても
性能が劣ります。
銀行のように、大量のデータを間違いなく、高速に処理するというような目的では、このようなコンパイルの
有無による実行速度の差が非常に大きく出ます（銀行は、毎秒数億件という取引を処理する必要があるため）。
そのため、JAVAやCOBOLのようなコンパイルを必要とする言語は、銀行のようなシステムとの相性が良いのです。

※補足：COBOLは2002年版よりオブジェクト指向にも対応しています。
*/