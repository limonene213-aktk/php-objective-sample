<?php

/*
もうちょいイケてる感じにしたい人向け、というか、001の品質向上版です。
具体的には、hogeCallに引数チェックを入れて、エラーハンドリングを強化して、
もし値が渡されない状況でもエラーを吐くようにしてあげたって感じです。
ただし、これでも実務的には「必要最低限度」の実装です。
*/

class Hoge{
    public $color;
    public function hogeCall($i1 = null, $i2=""){ //条件分岐との兼ね合いで$i1にも初期値を与えないとだめ
        if(isset($i1)){ //今回はisset関数で値の有無を確認するため、初期値にnullを用いた
        echo $i1;
        echo $i2;
        echo "\n";
        }else{
        echo "最低１個の引値をセットしてください！\n";
    }
}

/*
実際のところ、最低でもこの程度までエラー処理と安全性を高めないと
仕事用には使えません。処理経路上で引数が破壊されたり断絶されて
渡されてこないパターンを想定し、ここで引っかかっていることを
きちんと表示できるようにしましょう。ここまでやって、品質の良い
プログラムだ！と言えます。
今回のポイントは、引数を設定した場合、最低１個は引数がないと
エラーが出るということです。空の場合であれば処理中止にする、
空であっても判定が可能にする、第１引数は、そういった点を考慮する
必要があるため、２つ目以降の引数とは扱いが違うこと。このあたりは
慣れてくれば「当たり前」のことになってくるのですが、非常に大切な
ことです。
*/


    public function hogeColor(){
        if(isset($this->color)){ //isset関数で値の存在確認
            echo "色が".$this->color."に設定されていますよ\n";
        }else{
            echo "色が未設定です\n";
        }
        
    }
}

$hoge_obj = new Hoge();

$hoge_obj->hogeColor();

$hoge_obj->color="red";

$hoge_obj->hogeCall();

$hoge_obj->hogeCall("ほげええ");

$hoge_obj->hogeCall("MAZDAAAAA", "なぜ撃ったあああアアアア！？");

$hoge_obj->hogeColor();

/*
もちろん、エラーチェックの実装方法は、上記に限りません。
try/catchなどの例外処理を用いても堅牢にできますし、単にissetを
使うだけではなく、エラーメッセージをキャッチする方向でいくと、
エラー内容が明確化され、より良いプログラムができるでしょう。
*/


?>